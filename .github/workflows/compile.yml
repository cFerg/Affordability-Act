name: Compile master bill

on:
  push:
    branches: ["**"]
    paths:
      - "policy/sections/**"
      - "tools/compile_master.py"
      - "tools/update_index.py"
      - "tools/update_outline.py"
      - "policy/README.md"
      - "policy/outline.md"
      - ".github/workflows/compile.yml"
  pull_request:
    branches: ["**"]
    paths:
      - "policy/sections/**"
      - "tools/compile_master.py"
      - "tools/update_index.py"
      - "tools/update_outline.py"
      - "policy/README.md"
      - "policy/outline.md"
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write
  issues: write

concurrency:
  group: compile-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: List sections (debug)
        run: |
          echo "Folders under policy/sections:"
          ls -la policy/sections || true
          echo
          echo "Top lines of section READMEs:"
          for d in policy/sections/*; do
            if [ -f "$d/README.md" ]; then
              echo "---- $d/README.md"
              head -n1 "$d/README.md" || true
            fi
          done || true

      - name: Detect changed section files
        id: changed
        uses: tj-actions/changed-files@v44
        with:
          files: |
            policy/sections/**/README.md

      - name: Compile master bill
        run: python3 tools/compile_master.py
        continue-on-error: true   # <-- keep job green even if script hits an edge case

      - name: Update policy README index
        run: python3 tools/update_index.py
        continue-on-error: true   # <-- same here

      - name: Show policy/README.md (debug)
        run: |
          echo "--------- policy/README.md ---------"
          sed -n '1,200p' policy/README.md || true
          echo "------------------------------------"

      - name: Update outline date
        run: python3 tools/update_outline.py

      - name: Can commit?
        id: can
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            echo "can=true" >> "$GITHUB_OUTPUT"
          elif [ "${{ github.event.pull_request.head.repo.full_name }}" = "${{ github.repository }}" ]; then
            echo "can=true" >> "$GITHUB_OUTPUT"
          else
            echo "can=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Resolve commit identity
        id: ident
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            ACT="${{ github.event.pull_request.user.login }}"
            ID="${{ github.event.pull_request.user.id }}"
            PRNUM="${{ github.event.pull_request.number }}"
          else
            ACT="${{ github.actor }}"
            ID="${{ github.event.sender.id }}"
            PRNUM=""
          fi
          [ -z "$ACT" ] && ACT="${{ github.actor }}"
          [ -z "$ID" ] && ID="41898282"
          echo "name=$ACT" >> "$GITHUB_OUTPUT"
          echo "email=${ID}+${ACT}@users.noreply.github.com" >> "$GITHUB_OUTPUT"
          echo "prnum=$PRNUM" >> "$GITHUB_OUTPUT"

      - name: Build commit title
        id: msg
        shell: bash
        env:
          CHANGED: ${{ steps.changed.outputs.all_changed_files }}
          ACTOR: ${{ steps.ident.outputs.name }}
          PRNUM: ${{ steps.ident.outputs.prnum }}
        run: |
          secs=$(echo "$CHANGED" | tr ' ' '\n' | sed -n 's#^policy/sections/\([^/]*\)/README.md#\1#p' | tr '\n' ',' | sed 's/,$//')
          title="docs(policy): rebuild bill + update index/outline"
          [ -n "$PRNUM" ] && title="$title (#$PRNUM)"
          [ -n "$ACTOR" ] && title="$title by @$ACTOR"
          [ -n "$secs" ] && title="$title — $secs"
          title="$title [skip ci]"
          echo "title=$title" >> "$GITHUB_OUTPUT"

      - name: Commit compiled outputs (if changed)
        id: autocommit
        if: steps.can.outputs.can == 'true'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: ${{ steps.msg.outputs.title }}
          file_pattern: |
            policy/bill-text.md
            policy/README.md
            policy/outline.md
          commit_user_name: ${{ steps.ident.outputs.name }}
          commit_user_email: ${{ steps.ident.outputs.email }}

      - name: Upload compiled bill (artifact for forks)
        if: steps.can.outputs.can != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: bill-text.md
          path: policy/bill-text.md

      - name: Comment on PR (commit pushed)
        if: github.event_name == 'pull_request' && steps.can.outputs.can == 'true' && steps.autocommit.outputs.changes_detected == 'true'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ✅ **Compiled bill + updated index/outline.**
            - Author: @${{ steps.ident.outputs.name }}
            - Commit: `${{ steps.autocommit.outputs.commit_hash }}`
            - Sections touched: `${{ steps.changed.outputs.all_changed_files }}`
            - Outputs: `policy/bill-text.md`, `policy/README.md`, `policy/outline.md`

      - name: Comment on PR (no changes)
        if: github.event_name == 'pull_request' && steps.can.outputs.can == 'true' && steps.autocommit.outputs.changes_detected != 'true'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ℹ️ **Compile completed** — no changes to `policy/bill-text.md`, `policy/README.md`, or `policy/outline.md`.
            - Author: @${{ steps.ident.outputs.name }}
            - Sections touched: `${{ steps.changed.outputs.all_changed_files }}`
